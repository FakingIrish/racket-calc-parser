#lang racket

(require rackunit
         "tokenizer.rkt")

; unit testing for tokenizer
(check-equal? (tokenize "$$") '(EOF) "Tokenize EOF")
(check-equal? (tokenize "^") 'invalid "Invalid token")
(check-equal? (tokenize "1") '(num) "Tokenize single digit number")
(check-equal? (tokenize "1234") '(num) "Tokenize multi digit number")
(check-equal? (tokenize "$") 'invalid "Tokenize single dollar sign")
(check-equal? (tokenize "A") '(id) "Tokenize single letter")
(check-equal? (tokenize "ABCD") '(id) "Tokenize multiple letters")
(check-equal? (tokenize "A1") 'invalid "Mixing letter/num")
(check-equal? (tokenize "1A") 'invalid "Mixing num/letter")
(check-equal? (tokenize "1 + A") '(num add-op id) "Basic addition")
(check-equal? (tokenize "1)") '(num right-paren) "Tokenize num/right parens")
(check-equal? (tokenize "A)") '(id right-paren) "Tokenize id/parens close")
(check-equal? (tokenize "1(") '(num left-paren) "Tokenize num/left parens")
(check-equal? (tokenize "(") '(left-paren) "Tokenize left parens")
(check-equal? (tokenize ")") '(right-paren) "Tokenize right parens")
(check-equal? (tokenize ":=") '(asgn-op) "Tokenize assignment operator")
(check-equal? (tokenize "+") '(add-op) "Tokenize add operator")
(check-equal? (tokenize "-") '(add-op) "Tokenize subtract operator")
(check-equal? (tokenize "/") '(mult-op) "Tokenize divide operator")
(check-equal? (tokenize "*") '(mult-op) "Tokenize multiply operator")
(check-equal? (tokenize "read") '(read) "Tokenize read")
(check-equal? (tokenize "write") '(write) "Tokenize write")
(check-equal? (tokenize "read A") '(read id) "Tokenize read statement")
(check-equal? (tokenize "read A \n write A") '(read id write id) "Tokenize multiline read/write")
(check-equal? (tokenize "reader") '(id) "Tokenize reader id")
(check-equal? (tokenize "writer") '(id) "Tokenize writer id")
(check-equal? (tokenize "write A (A + 1) *C $$") '(write id left-paren id add-op num right-paren mult-op id EOF) "Complex example")
(check-equal? (tokenize "write (A + 1) *C $$") '(write left-paren id add-op num right-paren mult-op id EOF) "Complex example")
(check-equal? (tokenize "A & B") 'invalid "Invalid token between valid tokens")
(check-equal? (tokenize "$$ ^") '(EOF) "EOF with comments")